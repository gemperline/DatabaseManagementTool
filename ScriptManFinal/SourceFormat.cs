#region Copyright © 2001-2003 Jean-Claude Manoli [jc@manoli.net]
/*
 * This software is provided 'as-is', without any express or implied warranty.
 * In no event will the author(s) be held liable for any damages arising from
 * the use of this software.
 * 
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 * 
 *   1. The origin of this software must not be misrepresented; you must not
 *      claim that you wrote the original software. If you use this software
 *      in a product, an acknowledgment in the product documentation would be
 *      appreciated but is not required.
 * 
 *   2. Altered source versions must be plainly marked as such, and must not
 *      be misrepresented as being the original software.
 * 
 *   3. This notice may not be removed or altered from any source distribution.
 */
#endregion

using System;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Reflection;

namespace Manoli.Utils.CSharpFormat
{
    /// <summary>
    ///	Provides a base implementation for all code formatters.
    /// </summary>
    /// <remarks>
    /// <para>
    /// To display the formatted code on your web site, the web page must 
    /// refer to a stylesheet that defines the formatting for the different 
    /// CSS classes generated by CSharpFormat:
    /// .csharpcode, pre, .rem, .kwrd, .str, .op, .preproc, .alt, .lnum.
    /// </para>
    /// <para>
    /// Note that if you have multi-line comments in your source code
    /// (like /* ... */), the "line numbers" or "alternate line background" 
    /// options will generate code that is not strictly HTML 4.01 compliant. 
    /// The code will still look good with IE5+ or Mozilla 0.8+. 
    /// </para>
    /// </remarks>
    public abstract class SourceFormat
    {
        /// <summary/>
        protected SourceFormat()
        {
            _tabSpaces = 4;
        }

        private byte _tabSpaces;

        /// <summary>
        /// Gets or sets the tabs width.
        /// </summary>
        /// <value>The number of space characters to substitute for tab 
        /// characters. The default is <b>4</b>, unless overridden is a 
        /// derived class.</value>
        public byte TabSpaces
        {
            get { return _tabSpaces; }
            set { _tabSpaces = value; }
        }

        /// <overloads>Colorize source code to RTF</overloads>
        /// 
        /// <summary>
        /// Colorize source code stream to RTF.
        /// </summary>
        /// <param name="source">Source code stream.</param>
        /// <returns>A string containing the HTML formatted code.</returns>
        public string FormatStream(Stream source)
        {
            StreamReader reader = new StreamReader(source);
            string s = reader.ReadToEnd();
            reader.Close();
            return FormatCode(s);
        }

        /// <summary>
        /// Colorize a source code string to RTF.
        /// </summary>
        /// <returns>A string containing the RTF formatted code.</returns>
        public string FormatString(string source)
        {
            return FormatCode(source);
        }

        private Regex codeRegex;

        /// <summary>
        /// The regular expression used to capture language tokens.
        /// </summary>
        protected Regex CodeRegex
        {
            get { return codeRegex; }
            set { codeRegex = value; }
        }

        /// <summary>
        /// Called to evaluate the HTML fragment corresponding to each 
        /// matching token in the code.
        /// </summary>
        /// <param name="match">The <see cref="Match"/> resulting from a 
        /// single regular expression match.</param>
        /// <returns>A string containing the HTML code fragment.</returns>
        protected abstract string MatchEval(Match match);

        //does the formatting job
        private string FormatCode(string source)
        {
            //color the code
            string nSource = "";
            nSource = "{\\rtf1\\ansi\\ansicpg1252\\deff0\\deflang1033{\\fonttbl{\\f0\\fnil Consolas;}{\\f1\\fnil\\fcharset0 Microsoft Sans Serif;}}{\\colortbl;\\red47\\green85\\blue85;\\red0\\green128\\blue0;\\red0\\green0\\blue255;\\red128\\green128\\blue128;\\red0\\green128\\blue128;\\red255\\green0\\blue0;}\\viewkind4\\uc0\\pard\\cf1\\f0\\fs19";
            //nSource = "{\\rtf1\\ansi\\ansicpg1252\\deff0\\deflang1033{\\fonttbl{\\f0\\fnil Consolas;}{\\f1\\fnil\\fcharset0 Microsoft Sans Serif;}}";
            nSource += codeRegex.Replace(source, new MatchEvaluator(this.MatchEval));
            nSource += "}";
            nSource = nSource.Replace("\r", "\\par ");
            nSource = nSource.Replace("\n", "\\par ");
            nSource = nSource.Replace(System.Environment.NewLine, "\\par ");
            return nSource + "}";
        }

    }
}
